# -*- coding: utf-8 -*-
"""Emotion-Recognition_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VC6di2DHoARDstiqDtUy_D64xfGZFv5Q
"""

import warnings
warnings.filterwarnings('ignore')

import tensorflow as tf
from tensorflow import keras
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Conv2D, MaxPooling2D,Flatten,Dense,Dropout
from tensorflow.python.keras.metrics import categorical_crossentropy
from tensorflow.python.keras import backend as K
from tensorflow.python.keras.callbacks import ModelCheckpoint,EarlyStopping
from tensorflow.python.keras.preprocessing.image import ImageDataGenerator
import split_folders

classifier = Sequential()
classifier.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))
classifier.add(Dropout(0.2))
classifier.add(Conv2D(32, (3, 3), activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))
classifier.add(Dropout(0.2))
classifier.add(Flatten())
classifier.add(Dense(units = 256, activation = 'relu'))
classifier.add(Dense(units = 3, activation = 'softmax'))
classifier.summary()

classifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])

filepath = 'adam_weights.hdf5'
acc_check = ModelCheckpoint(filepath, monitor='val_loss', verbose=1, save_best_only=False, save_weights_only=False, mode='auto', period=1)
stop_check = EarlyStopping(monitor='val_loss', min_delta=0, patience=15, verbose=1, mode='max')
callbacks_list = [acc_check,stop_check]

train_datagen = ImageDataGenerator(rescale = 1./255,
shear_range = 0.2,
zoom_range = 0.2,
horizontal_flip = True)


training_set = train_datagen.flow_from_directory('test_dataset_5',
target_size = (64, 64),
batch_size = 10,
color_mode = 'rgb',                                                 
class_mode = 'categorical')

split_folders.ratio('5_Emotions', output="splited_data", seed=1337, ratio=(.8, .1, .1))

img_rows , img_cols = 64,64
classes = 5
batch_size = 32

training_set = train_datagen.flow_from_directory(
            'splited_data_test/train', 
            target_size=(img_rows, img_cols),
            batch_size=batch_size,
            class_mode='categorical')

validation_set = train_datagen.flow_from_directory(
            'splited_data_test/val',
            target_size=(img_rows, img_cols),
            batch_size=batch_size,
            class_mode='categorical')

history_adam = classifier.fit_generator( training_set,
                    steps_per_epoch=2100,
                    epochs=30,
                    validation_data=validation_set,
                    validation_steps=210,
                     callbacks=callbacks_list)

import matplotlib.pyplot as plt

plt.plot(history_adam.history['accuracy'])
plt.plot(history_adam.history['val_accuracy'])
plt.title('model acc')
plt.ylabel('acc')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper right')
plt.show()

plt.plot(history_adam.history['loss'])
plt.plot(history_adam.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper right')
plt.show()

"""# Till here"""

import numpy as np
from tensorflow.python.keras.preprocessing import image
import matplotlib.pyplot as plt

test_image = image.load_img('pred/n1.png', target_size = (64, 64,1))
plt.imshow(test_image)

test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
result = classifier.predict(test_image)
print(result)
result = np.round(result)
print(result)

def label_predict(img):
    
    test_image = image.load_img(img,target_size = (64, 64,1))
    test_image = image.img_to_array(test_image)
    test_image = np.expand_dims(test_image, axis = 0)

    result = classifier.predict(test_image)
    print(result)
    if result[0][0] == 1:
        label = "0"
    elif result[0][1] == 1:
        label = "1"
    else: 
        label = "2"
    return label

label_predict('pred/n1.png')

import os

path="splited_data/test"
os.listdir(path)

import random
path="splited_data_test/test"
labels=[]
pred_labels=[]

imagePaths = os.path.join(path,"happy")
random.seed(42)
for imagePath in os.listdir(imagePaths):
    pred=label_predict(os.path.join(imagePaths,imagePath))
    label = 0
    labels.append(label)
    pred_labels.append(pred)
    
imagePaths = os.path.join(path,"neutral")
random.seed(42)
for imagePath in os.listdir(imagePaths):
    pred=label_predict(os.path.join(imagePaths,imagePath))
    label = 1
    labels.append(label)
    pred_labels.append(pred)
    
imagePaths = os.path.join(path,"surprised")
random.seed(42)
for imagePath in os.listdir(imagePaths):
    pred=label_predict(os.path.join(imagePaths,imagePath))
    label = 2
    labels.append(label)
    pred_labels.append(pred)

imagePaths = os.path.join(path,"sad")
random.seed(42)
for imagePath in os.listdir(imagePaths):
    pred=label_predict(os.path.join(imagePaths,imagePath))
    label = 3
    labels.append(label)
    pred_labels.append(pred)

imagePaths = os.path.join(path,"angry")
random.seed(42)
for imagePath in os.listdir(imagePaths):
    pred=label_predict(os.path.join(imagePaths,imagePath))
    label = 4
    labels.append(label)
    pred_labels.append(pred)